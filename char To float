//*********************************************************//
//  칩위스퍼 char형 입력을 구현 함수에 float입력으로 만들기    //
//*********************************************************//
#include <stdio.h>
#include <stdlib.h>

int bit_return(int a, int loc) // Bit returned at location 
{ 
	int buf = a & 1<<loc; 

	if (buf == 0) return 0;
	else
		return 1;
}

void bit_print(float a)
{
	void *b;
	b = &a;
	int i = 0;
	for (i = 31; i >= 0; i--)
	{
		int j = 0;
		printf("%d", bit_return(*((int*)b), i));
		j = 31 - i;
		switch (j) { case 0: case 8: printf(" "); }
	}
	printf("\n");
}

void bit_int_print(int a)
{	
	int i, j;

	if (a == 0)
		printf("프로그램을 종료합니다");
	else
		for (i = 31; i >= 0; i--)
		{
			printf("%d", (a >> i) & 1);
		}
	printf("\n");
}


float tanh2(float h)
{
	return (2 / (1 + exp(-2 * h)) - 1);

}

int main()
{
	unsigned char pt[16]; //char -> unsinged char

	// Test코드 
#if 0
	pt[0] = 0x11;
	pt[1] = 0x22;
	pt[2] = 0x33;
	pt[3] = 0x44;

	printf("<< pt[0~3] 배열 >>\n");
	for (int i = 0; i < 4; i++)
	{
		printf("pt[%d] = %x ", i, pt[i]);
	}

	printf("\n\n");

	printf("<< char형을 float에 담기 >>\n");
	// char형을 float에 담기 : char가 거꾸로 들어감
	float *input = pt; // 0x44 0x33 0x22 0x11 거꾸로 들어감
	printf("%f = ", input[0]);
	bit_print(input[0]);
	printf("\n");

	printf("<< float를 char형에 다시 담아 출력 >>\n");
	//  float를 char형에 담기 by 포인터 : 주소를 참조하면 최하위부터 0번쩨 배열에 담긴다
	char *p;
	p = &input[0];

	for (int i = 0; i < 4; i++)
	{
		printf("p[%d] = %x ", i, p[i]);
	}

	printf("\n\n");

	// char형 4개 붙여서 float에 넣기 : 정수로 출력됨
	printf("<< char형 4개 붙여서 float에 넣기 >>\n");
	float in = (pt[0] << 24) | (pt[1] << 16) | (pt[2] << 8) | (pt[3]);
	printf("%f = ", in);
	bit_print(in);
	printf("\n");

	// float를 char형에 담기 : 정수로 형변환하면 소수 부분이 없어진다 -> 포인터 필요
	printf("<< float를 형변환해서 char에 담기  >>\n");
	printf("%d = ",(int)(input[0]));   // float에 & 연산자 불가능
	bit_int_print((int)(input[0]));
	printf("\n");

	pt[4] = 0x55;
	pt[5] = 0x66;
	pt[6] = 0x77;
	pt[7] = 0x88; // 0x88로 하니까 문제가 됨
				  //printf("%x", pt[7]); // 그냥 0x88만 출력해도 ffffff88 이렇게 나옴


	printf("<< pt[4~7] 배열 >>\n");
	for (int i = 0; i < 4; i++)
	{
		printf("pt[%d] = %x ", i + 4, pt[i + 4]);
	}
	printf("\n\n");

	// 4byte씩 끊어서 잘 담음 
	printf("<< char형을 float에 담기 >>\n");
	printf("%f = ", input[1]);
	bit_print(input[1]);
	printf("\n\n");
#endif 
	



#if 1
	// 칩위스퍼 입출력값 확인 -> 리틀 엔디언 고려해야함 ( input[0]은 다르지만 char형 결과는 같게 나오네? )
#if 1  // 입력 빅 엔디언
	pt[0] = 0x2a;
	pt[1] = 0x80;
	pt[2] = 0x76;
	pt[3] = 0x6b;
#endif

#if 0 // 입력 리틀 엔디언 
	pt[0] = 0x6b;
	pt[1] = 0x76;
	pt[2] = 0x80;
	pt[3] = 0x2a;
#endif

	printf("<< (char) : pt[0~3] >>\n");
	for (int i = 0; i < 4; i++)
	{
		printf("pt[%d] = %x ", i, pt[i]);
	}
	printf("\n\n");

	// pt배열의 값이 최하위부터 들어간다 
	float *input = pt; // 0x44 0x33 0x22 0x11 거꾸로 들어감 
	printf("<< (float) : input[0] >>\n");
	printf("%f = ", input[0]); 
	bit_print(input[0]);
	printf("\n");
	
	printf("<< (float) : tanh2(input[0]) >>\n");
	input[0] = tanh2(input[0]);
	printf("%f = ", input[0]);
	bit_print(input[0]);
	printf("\n");


	//  float를 char형에 담기 by 포인터 : 주소를 참조하면 최하위부터 0번쩨 배열에 담긴다 
	unsigned char *p;  // char (x) 
	p = &input[0];

	printf("<< (char) : p[0~3] >>\n");
	for (int i = 0; i < 4; i++)
	{ 
		printf("p[%d] = %02x ", i, p[i]);
	}
	
#endif

	return 0;
}
